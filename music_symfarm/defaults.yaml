
# This config file contains the default configuration for music-symfarm
# To change these values, copy this file, make your modifications, and provide
# the path to it using the command line.

# Merging the config specified with --conf and these defaults is done at the
# top-level only.
# This means that if you specify a "structure" key, you need to specify all
# keys in it, regardless of how many you actually want to change. This is why
# it's recommended to just copy the entire file.


# Defaults for main options (implemented as CLI flags)
options:
  clean: True
  rescan_existing: False
  relative_links: False


# A list of regular expressions to select files to process
# Only one must match for a file to be accepted
valid_files:
  - "(?i:.+\\.(flac|mp3|ogg|oga|wma))"


# Various templates that control the structure of the symlinks
structure:
  # Path naming templates
  path: "{ALBUMARTIST}/{ALBUM} ({year})"
  path_compilation: "Various Artists/{ALBUM} ({year})"

  # Filename where the artist is the same for all songs in the album
  file: "{TRACKNUMBER:>02} - {TITLE}.{ext}"
  # Filename where there are multiple artists in the same album
  file_multiartist: "{TRACKNUMBER:>02} - {ARTIST} - {TITLE}.{ext}"

  # Added to the front of the filename in the case of more than 1 disc
  # file_disc_prefix: "Disc {DISCNUMBER}/"
  file_disc_prefix: "{DISCNUMBER}-"

  # Characters to strip from paths
  character_strip: "?*"

  # Defines a map of bad character to replacement to use in paths
  character_replace:
    - '<>:\/|'
    - '[]----'


# Map of tag name to all the tag names to try when asking for it.
# Tags will be tried in order until one contains a non-empty result.
# Note that the tag name itself will not be tried unless it is added to the list
# ie: Use `DATE: ["DATE", "YEAR"]` vs `DATE: ["YEAR"]`
tagmap:
  DATE: ["ORIGINALDATE", "ORIGDATE", "DATE", "ORIGINALYEAR", "ORIGYEAR", "YEAR"]
  DISCNUMBER: ["DISCNUMBER", "DISKNUMBER", "DISC", "DISK"]
  DISCTOTAL: ["DISCTOTAL", "DISKTOTAL", "TOTALDISCS", "TOTALDISKS"]
  TRACKTOTAL: ["TRACKTOTAL", "TOTALTRACKS"]


# Define some fallbacks to use in templates if the data cannot be found in the file
# Supports template strings.
# Can be used to create custom variables (ie: "year" is just a regex of "DATE").
# When creating custom variables use lower case. This will prevent conflicts
# with tags pulled from files (tags are always uppercase)
fallbacks:
  year: "{DATE:/(\\d+).*/\\1/}"
  ALBUMARTIST: "{ARTIST}"
  ARTIST: "Unknown Artist"
  ALBUM: "Unknown Album"
  TITLE: "Track {TRACKNUMBER}"
  DATE: "0000-00-00"
  DISCNUMBER: 1
  TRACKNUMBER: 0


# The overrides section contains a list of overrides for the scanned music.
# Generally:
#  1. Match based on one or more criteria (all must match)
#  2. Apply one or more operations
#  3. Order matters (all matching operations will be executed in the specified order)
#
# Selection criteria:
#   - any metadata from the music
#     - ARTIST, ALBUM, ALBUMARTIST, DATE, etc
#   - `abspath`
#     - The absolute path to the file
#     - ex: "/home/user/music/songs/song.mp3"
#   - `path`
#     - The path to the file relative to the music directory
#     - ex: "songs/song.mp3"
#   - `filename`
#     - The filename of the source file
#     - ex: "song.mp3"
#   - `ext`
#     - The extension of the source file
#     - ex: "mp3"
#
# Selections can be:
#  - null
#    - matches if the tag isn't set
#  - exact match
#    - case sensitive
#    - ex: "Some artist" (will match "Some artist" but not "Some Artist")
#  - regex match
#    - used by starting and ending the selection with "/"
#    - Special characters:
#      - The "/" character must be escaped ("\\/") to be used in a match
#      - To use the "{" or "}" character, use "{{" or "}}" instead (like normal format strings)
#    - Supports the full Python regex syntax
#      - https://docs.python.org/3/library/re.html#regular-expression-syntax
#    - Must completely match ("/art/" will NOT match "artist")
#      - https://docs.python.org/3/library/re.html#re.fullmatch
#    - case sensitive (the inline "i" flag can change this)
#    - ex: "/[Ss]ome [Aa]rtist/"
#          (matches "Some Artist", "Some artist", etc)
#    - ex: "/(?i:some artist)/"
#          (matches all case combinations of "Some Artist")
#    - ex: "/Greatest Hits( \(Deluxe Edition\))?/"
#          (will match "Greatest Hits" and "Greatest Hits (Deluxe Edition)")
#
# Operations:
#  - consists of key/value pairs to set on the music
#  - Keys:
#    - `debug`:
#      - If set to true, the operation results will be logged out at the INFO level
#    - any metadata keys:
#      - ex: ARTIST, ALBUM, ALBUMARTIST, YEAR, etc
#    - `filename_template`:
#      - The filename template to use
#      - Will override all other settings that affect the filename
#      - The directory the symlink goes in is not affected
#      - Can be overridden by `path_template`
#      - ex: "{filename}" (preserves the original filename)
#    - `path_template`:
#      - The full path template to use (relative to the output directory)
#      - Will override all other settings that affect the path
#      - ex: "Other songs/{ext}/{filename}"
#    - `ignore`:
#      - Don't link this file
#    - `is_compilation`:
#      - boolean that sets if the album is a compilation or not
#      - Since the COMPILATION tag is frequently misused, it is ignored. If
#        your collection isn't like this, use an override of: COMPILATION=1 -->
#        is_compilation=True to force the tag to be respected.
#      - When setting is_compilation=False on an album, it's recommended to
#        make sure the ALBUMARTIST tag is set to the same thing for every song
#        to keep them grouped into a single album.
#
#  - Values:
#    - If a value is null, the tag will be removed
#    - Processed as Python templates
#      - See https://docs.python.org/3/library/string.html#formatspec
#    - Any metadata from the song can be used by the template
#      - ex: "{ARTIST}"
#    - If a key's selection was a regular expression, the match can be expanded
#      - See https://docs.python.org/3/library/re.html#re.Match.expand
#      - To expand a variable, use the format "KEY/<template>/" for the key name
#      - ex: "{ARTIST/\\1/}" (when ARTIST was selected as a regex with at least 1 group)
#      - A non-expanded regex will be formatted as the entire match (ie. the entire tag)
#    - Variables can be formatted using regex:
#      - See https://docs.python.org/3/library/re.html#re.sub
#      - By using a format specifier like "/match/sub/<normal format spec>",
#        the regex substitution will first be applied before the rest of the
#        format spec is processed
#      - ex: '{filename:/(\d+).*/\1/}' will take the "filename" value, pull
#            the leading digits off it, and insert them into the value.
#            This specific case is useful for assigning disc numbers to files
#            based on the filename if they aren't included in the tags.
#    - Both of the above can be combined:
#      - ex: '{ARTIST/\\1/:/(.*) A (.*)/\\1 a \\2/}' will take the first component
#            of the ARTIST regex match, then lowercase the " A " in the middle of it
#
# Some full examples are provided below (note the position of the "-"s)
#overrides:
#  # Set the album artist based on the artist and album
#  - - ARTIST: "A Band"
#      ALBUM: "Greatest Hits"
#    - ALBUMARTIST: "A Band"
#
#  # Ignore all music by a certain artist
#  - - ARTIST: "Bad band"
#    - ignore: True
#
#  # Directly set the final path of the symlinks
#  # OC ReMix stores the game the music originated from in the ORIGINALALBUM tag
#  - - ALBUM: "http://www.ocremix.org"
#    - path_template: "OverClocked ReMix/{ORIGINALALBUM}/{filename}"
#
#  # Use regex to set disc numbers based on the filename
#  - - ARTIST: "A Band"
#      ALBUM: "Greatest Hits (2 disc edition)"
#    - DISCNUMBER: "{filename:/(\\d+).*/\\1/}"
#
#  # Use regex to match a certain artist
#  # (in this case it's being used to do a case-insensitive match)
#  - - ALBUMARTIST: "/(?i:band of the year)/"
#    - ALBUMARTIST: "Band of the Year"
#
#  # Use regex to pull disc numbers out of an album title
#  # (sets both the album and discnumber from the same match)
#  - - ALBUM: "/(.*) \[CD (\d+)\]/"
#    - ALBUM: "{ALBUM/\\1/}"
#      DISCNUMBER: "{ALBUM/\\2/}"
#
#  # Force all albums with an ALBUMARTIST of "Various" or "Various Artists"
#  # to be compilations (this is a fairly standard convention).
#  - - ALBUMARTIST: "/(?i:various( artists)?)/"
#    - is_compilation: True
#
# No overrides configured by default
overrides:
